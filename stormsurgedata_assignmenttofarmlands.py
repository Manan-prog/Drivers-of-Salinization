# -*- coding: utf-8 -*-
"""StormSurgeData_AssignmentToFarmlands

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kfOG6XKuhrcHp-YVfssT8MAZpUExqQ17
"""

import pandas as pd
from geopy.distance import geodesic
from tqdm import tqdm
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
# Change the working directory
# %cd /content/drive/MyDrive/Chapter2/Storm_Surge/Code_Data

# Load CSV files into DataFrames
df_a = pd.read_csv('Farmland_LatLon.csv')  # Replace 'file_a.csv' with the path to your file A
df_b = pd.read_csv('Interpolated_Lowtide.csv')  # Replace 'file_b.csv' with the path to your file B

# Function to find the nearest coordinate in df_b for a given coordinate
def find_nearest_coordinate(coord_a, df_b):
    nearest_coord = None
    min_distance = float('inf')

    for _, row in df_b.iterrows():
        coord_b = (row['lat'], row['lon'])
        distance = geodesic(coord_a, coord_b).kilometers
        if distance < min_distance:
            min_distance = distance
            nearest_coord = row

    return nearest_coord

# Assign time series from df_b to coordinates in df_a
df_a['time_series'] = None

for index, row in tqdm(df_a.iterrows(), total=df_a.shape[0], desc="Assigning time series"):
    coord_a = (row['lat'], row['lon'])
    nearest_coord_b = find_nearest_coordinate(coord_a, df_b)
    df_a.at[index, 'time_series'] = nearest_coord_b.values[2:].tolist()  # Assuming time series data starts from the 3rd column. # Convert Series to list


# Save the result to a new CSV file
df_a.to_csv('InterpolatedLowtide_Assigned.csv', index=False)  # Modify 'result.csv' to your desired output file name

# Display the first few rows of the result
print(df_a.head())





# Commented out IPython magic to ensure Python compatibility.
#Creating a CSV file with amplitude(intensity) of wave corresponding to each farmland by simply subtracting High tide value from the Low tide value

# Change the working directory
# %cd /content/drive/MyDrive/Chapter2/Storm_Surge/Code_Data/Results

InterpolatedHightide_Assigned = pd.read_csv('InterpolatedHightide_Assigned.csv')
InterpolatedLowtide_Assigned = pd.read_csv('InterpolatedLowtide_Assigned.csv')

# Extract latitudes, longitudes, and time series data separately
lat_lon_columns = InterpolatedHightide_Assigned.columns[:2]  # Assuming the first two columns are lat and lon
hightide_data = InterpolatedHightide_Assigned.iloc[:, 2:]
lowtide_data = InterpolatedLowtide_Assigned.iloc[:, 2:]

# Subtract low tide data from high tide data
amplitude_data = hightide_data.subtract(lowtide_data)

# Combine latitudes, longitudes, and the subtracted time series data
result = pd.concat([InterpolatedHightide_Assigned[lat_lon_columns], amplitude_data], axis=1)

# Save the result to a CSV file
result.to_csv('Amplitude_Wave_Assigned.csv', index=False)

#Creating a CSV file for Farmland's overwash by subtracting Farmland Elevationa and High Tide

#Read the DEM file
DEM = pd.read_csv('DEM_Restructured.csv')
DEM_Farmlands = DEM.iloc[:, 2].values

hightide_data = InterpolatedHightide_Assigned.iloc[:, 2:].values

# Subtract DEM values B from each column of InterpolatedHightide_Assigned
result_array = DEM_Farmlands[:, np.newaxis] - hightide_data

# Create a new DataFrame from the result array
df_C = pd.DataFrame(result_array, columns=InterpolatedHightide_Assigned.columns[2:])

# Combine latitudes, longitudes, and the subtracted time series data
df_C = pd.concat([InterpolatedHightide_Assigned[lat_lon_columns], df_C], axis=1)


# Save the result to a new CSV file
df_C.to_csv('Storm_Event_Assigned.csv', index=False)

